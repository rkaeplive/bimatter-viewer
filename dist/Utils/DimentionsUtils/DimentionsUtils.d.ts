import { BufferGeometry, Color, ConeGeometry, LineDashedMaterial, Mesh, MeshBasicMaterial, Plane, Vector3 } from "three";
import Utils from "../Utils";
import { DimensionLine } from "./DimentionLine";
import "./Dimentions.css";
import { CSS2DObject } from "three/examples/jsm/renderers/CSS2DRenderer";
export declare class DimensionsUtils {
    readonly context: Utils;
    dimensions: DimensionLine[];
    labelClassName: string;
    previewClassName: string;
    enabled: boolean;
    preview: boolean;
    dragging: boolean;
    snapDistance: number;
    baseScale: Vector3;
    lineMaterial: LineDashedMaterial;
    endpointsMaterial: MeshBasicMaterial;
    startPoint: Vector3;
    endPoint: Vector3;
    endpoint: ConeGeometry | null;
    previewElement: CSS2DObject | null;
    currentDimension: DimensionLine | null;
    found: Vector3 | undefined;
    curAxis: string | null;
    measureInPros: boolean;
    measureStart: boolean;
    measureObject: CSS2DObject;
    private _selectionState;
    constructor(context: Utils);
    private dispose;
    private update;
    private setPreviewElement;
    get active(): boolean;
    get previewActive(): boolean;
    get previewObject(): CSS2DObject | null;
    set previewActive(state: boolean);
    set active(state: boolean);
    set dimensionsColor(color: Color);
    set dimensionsWidth(width: number);
    set endpointGeometry(geometry: ConeGeometry);
    set endpointScaleFactor(factor: number);
    set endpointScale(scale: Vector3);
    create(): void;
    createInPlane(plane: Plane): void;
    delete(): void;
    deleteAll(): void;
    cancelDrawing(): void;
    setDimensionUnit(units: typeof DimensionLine.units): void;
    private drawStart;
    private drawStartInPlane;
    private drawInProcess;
    private drawEnd;
    get getDimensionsLines(): DimensionLine[];
    drawDimension(): DimensionLine;
    getBoundingBoxes(): (Mesh<BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap> | null)[];
    static getDefaultEndpointGeometry(height?: number, radius?: number): ConeGeometry;
    private getClosestVertex;
    private getVertices;
    private getVertex;
    changeAxes(): void;
    drawInProcessEvent(e: MouseEvent): void;
    setMeasureVisible(bool: boolean): void;
    measureEventHandle(): void;
    measureEvent(): void;
}
