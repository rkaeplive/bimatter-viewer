import { BoxGeometry, BufferGeometry, Color, ConeGeometry, Group, Line, LineDashedMaterial, Mesh, MeshBasicMaterial, Vector3 } from "three";
import { CSS2DObject } from "three/examples/jsm/renderers/CSS2DRenderer";
import { DimensionsUtils } from "./DimentionsUtils";
export declare class DimensionLine {
    readonly context: DimensionsUtils;
    static scaleFactor: number;
    static scale: number;
    static units: string;
    root: Group | null;
    endpointMeshes: Mesh[];
    scale: Vector3;
    boundingSize: number;
    labelClassName: string;
    length: number;
    center: Vector3;
    axis: BufferGeometry | null;
    line: Line | null;
    textLabel: CSS2DObject | null;
    boundingMesh: Mesh | null;
    start: Vector3;
    end: Vector3;
    lineMaterial: LineDashedMaterial | null;
    endpointMaterial: MeshBasicMaterial | null;
    endpoint: ConeGeometry | null;
    className: string;
    constructor(context: DimensionsUtils, start: Vector3, end: Vector3, lineMaterial: LineDashedMaterial, endpointMaterial: MeshBasicMaterial, endpoint: ConeGeometry, className: string, endpointScale: Vector3);
    dispose(): void;
    get boundingBox(): Mesh<BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap> | null;
    get text(): CSS2DObject | null;
    set dimensionColor(dimensionColor: Color);
    set visibility(visible: boolean);
    set endpointGeometry(geometry: ConeGeometry);
    set endpointScale(scale: Vector3);
    set endPoint(point: Vector3);
    removeFromScene(): void;
    createBoundingBox(): void;
    rescaleObjectsToCameraPosition(): void;
    rescaleMesh(mesh: Mesh, scalefactor?: number, x?: boolean, y?: boolean, z?: boolean): void;
    addEndpointMeshes(): void;
    newEndpointMesh(position: Vector3, direction: Vector3): void;
    newText(): CSS2DObject;
    getTextContent(): string;
    newBoundingBox(): Mesh<BoxGeometry, import("three").Material | import("three").Material[], import("three").Object3DEventMap>;
    setupBoundingBox(end: Vector3): void;
    getLength(): number;
    getCenter(): Vector3;
}
