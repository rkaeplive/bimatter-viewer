export default GUI;
export const __esModule: boolean;
declare const BooleanController_base: {
    new (parent: any, object: any, property: any, className: any, elementType?: string): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): any;
            save(recursive?: boolean): object;
            open(open?: boolean): any;
            close(): any;
            _setClosed(closed: any): void;
            show(show?: boolean): any;
            hide(): any;
            openAnimated(open?: boolean): any;
            title(title: string): any;
            _title: string | undefined;
            reset(recursive?: boolean): any;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): any;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
};
export class BooleanController extends BooleanController_base {
    constructor(parent: any, object: any, property: any);
    $input: HTMLInputElement;
    $disable: HTMLInputElement;
    updateDisplay(): this;
}
declare const ColorController_base: {
    new (parent: any, object: any, property: any, className: any, elementType?: string): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): any;
            save(recursive?: boolean): object;
            open(open?: boolean): any;
            close(): any;
            _setClosed(closed: any): void;
            show(show?: boolean): any;
            hide(): any;
            openAnimated(open?: boolean): any;
            title(title: string): any;
            _title: string | undefined;
            reset(recursive?: boolean): any;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): any;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
};
export class ColorController extends ColorController_base {
    constructor(parent: any, object: any, property: any, rgbScale: any);
    $input: HTMLInputElement;
    $text: HTMLInputElement;
    $display: HTMLDivElement;
    _format: {
        isPrimitive: boolean;
        match: (v: any) => boolean;
        fromHexString: (string: any) => string | false;
        toHexString: (string: any) => string | false;
    } | {
        isPrimitive: boolean;
        match: (v: any) => boolean;
        fromHexString(string: any, target: any, rgbScale?: number): void;
        toHexString([r, g, b]: [any, any, any], rgbScale?: number): string;
    } | {
        isPrimitive: boolean;
        match: (v: any) => boolean;
        fromHexString(string: any, target: any, rgbScale?: number): void;
        toHexString({ r, g, b }: {
            r: any;
            g: any;
            b: any;
        }, rgbScale?: number): string;
    } | undefined;
    _rgbScale: any;
    _initialValueHexString: string | boolean;
    _textFocused: boolean;
    $disable: HTMLInputElement;
    reset(): this;
    _setValueFromHexString(value: any): void;
    save(): string | false;
    load(value: any): this;
    updateDisplay(): this;
}
export class Controller {
    constructor(parent: any, object: any, property: any, className: any, elementType?: string);
    parent: {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): this;
            _name: string | undefined;
            onChange(callback: Function): this;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): this;
            enable(enabled?: boolean): this;
            disable(disabled?: boolean): this;
            show(show?: boolean): this;
            hide(): this;
            options(options: object | any[]): any;
            min(min: number): this;
            max(max: number): this;
            step(step: number): this;
            decimals(decimals: number): this;
            listen(listen?: boolean): this;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): this;
            updateDisplay(): this;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): this;
            _name: string | undefined;
            onChange(callback: Function): this;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): this;
            enable(enabled?: boolean): this;
            disable(disabled?: boolean): this;
            show(show?: boolean): this;
            hide(): this;
            options(options: object | any[]): any;
            min(min: number): this;
            max(max: number): this;
            step(step: number): this;
            decimals(decimals: number): this;
            listen(listen?: boolean): this;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): this;
            updateDisplay(): this;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): this;
            _name: string | undefined;
            onChange(callback: Function): this;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): this;
            enable(enabled?: boolean): this;
            disable(disabled?: boolean): this;
            show(show?: boolean): this;
            hide(): this;
            options(options: object | any[]): any;
            min(min: number): this;
            max(max: number): this;
            step(step: number): this;
            decimals(decimals: number): this;
            listen(listen?: boolean): this;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): this;
            updateDisplay(): this;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): this;
            _name: string | undefined;
            onChange(callback: Function): this;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): this;
            enable(enabled?: boolean): this;
            disable(disabled?: boolean): this;
            show(show?: boolean): this;
            hide(): this;
            options(options: object | any[]): any;
            min(min: number): this;
            max(max: number): this;
            step(step: number): this;
            decimals(decimals: number): this;
            listen(listen?: boolean): this;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): this;
            updateDisplay(): this;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): any;
        save(recursive?: boolean): object;
        open(open?: boolean): any;
        close(): any;
        _setClosed(closed: any): void;
        show(show?: boolean): any;
        hide(): any;
        openAnimated(open?: boolean): any;
        title(title: string): any;
        _title: string | undefined;
        reset(recursive?: boolean): any;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): this;
                _name: string | undefined;
                onChange(callback: Function): this;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): this;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): this;
                enable(enabled?: boolean): this;
                disable(disabled?: boolean): this;
                show(show?: boolean): this;
                hide(): this;
                options(options: object | any[]): any;
                min(min: number): this;
                max(max: number): this;
                step(step: number): this;
                decimals(decimals: number): this;
                listen(listen?: boolean): this;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): this;
                updateDisplay(): this;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): any;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): this;
                _name: string | undefined;
                onChange(callback: Function): this;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): this;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): this;
                enable(enabled?: boolean): this;
                disable(disabled?: boolean): this;
                show(show?: boolean): this;
                hide(): this;
                options(options: object | any[]): any;
                min(min: number): this;
                max(max: number): this;
                step(step: number): this;
                decimals(decimals: number): this;
                listen(listen?: boolean): this;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): this;
                updateDisplay(): this;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: (arg0: any) => any): any;
        _onOpenClose: ((arg0: any) => any) | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): this;
            _name: string | undefined;
            onChange(callback: Function): this;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): this;
            enable(enabled?: boolean): this;
            disable(disabled?: boolean): this;
            show(show?: boolean): this;
            hide(): this;
            options(options: object | any[]): any;
            min(min: number): this;
            max(max: number): this;
            step(step: number): this;
            decimals(decimals: number): this;
            listen(listen?: boolean): this;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): this;
            updateDisplay(): this;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    };
    object: object;
    property: string;
    _disabled: boolean;
    _hidden: boolean;
    initialValue: any;
    domElement: HTMLElement;
    $name: HTMLElement;
    $widget: HTMLElement;
    $disable: HTMLElement;
    _listenCallback(): void;
    name(name: string): this;
    _name: string | undefined;
    onChange(callback: Function): this;
    _onChange: Function | undefined;
    protected _callOnChange(): void;
    _changed: boolean | undefined;
    onFinishChange(callback: Function): this;
    _onFinishChange: Function | undefined;
    protected _callOnFinishChange(): void;
    reset(): this;
    enable(enabled?: boolean): this;
    disable(disabled?: boolean): this;
    show(show?: boolean): this;
    hide(): this;
    options(options: object | any[]): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): any;
            save(recursive?: boolean): object;
            open(open?: boolean): any;
            close(): any;
            _setClosed(closed: any): void;
            show(show?: boolean): any;
            hide(): any;
            openAnimated(open?: boolean): any;
            title(title: string): any;
            _title: string | undefined;
            reset(recursive?: boolean): any;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): any;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): this;
        _name: string | undefined;
        onChange(callback: Function): this;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): this;
        enable(enabled?: boolean): this;
        disable(disabled?: boolean): this;
        show(show?: boolean): this;
        hide(): this;
        options(options: object | any[]): any;
        min(min: number): this;
        max(max: number): this;
        step(step: number): this;
        decimals(decimals: number): this;
        listen(listen?: boolean): this;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): this;
        updateDisplay(): this;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
    min(min: number): this;
    max(max: number): this;
    step(step: number): this;
    decimals(decimals: number): this;
    listen(listen?: boolean): this;
    _listening: boolean | undefined;
    _listenCallbackID: number | undefined;
    _listenPrevValue: any;
    getValue(): any;
    setValue(value: any): this;
    updateDisplay(): this;
    load(value: any): this;
    save(): any;
    destroy(): void;
}
declare const FunctionController_base: {
    new (parent: any, object: any, property: any, className: any, elementType?: string): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): any;
            save(recursive?: boolean): object;
            open(open?: boolean): any;
            close(): any;
            _setClosed(closed: any): void;
            show(show?: boolean): any;
            hide(): any;
            openAnimated(open?: boolean): any;
            title(title: string): any;
            _title: string | undefined;
            reset(recursive?: boolean): any;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): any;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
};
export class FunctionController extends FunctionController_base {
    constructor(parent: any, object: any, property: any);
    $button: HTMLButtonElement;
    $disable: HTMLButtonElement;
}
export class GUI {
    constructor({ parent, autoPlace, container, width, title, closeFolders, injectStyles, touchStyles }?: {
        autoPlace?: boolean | undefined;
        container?: HTMLElement | undefined;
        width?: number | undefined;
        title?: string | undefined;
        closeFolders?: boolean | undefined;
        injectStyles?: boolean | undefined;
        touchStyles?: number | undefined;
        parent?: {
            parent: any;
            root: any;
            children: ({
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            } | any)[];
            controllers: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            }[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
            addColor(object: object, property: string, rgbScale?: number): {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): this;
            save(recursive?: boolean): object;
            open(open?: boolean): this;
            close(): this;
            _setClosed(closed: any): void;
            show(show?: boolean): this;
            hide(): this;
            openAnimated(open?: boolean): any;
            title(title: string): this;
            _title: string | undefined;
            reset(recursive?: boolean): this;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: {
                    parent: any;
                    object: object;
                    property: string;
                    _disabled: boolean;
                    _hidden: boolean;
                    initialValue: any;
                    domElement: HTMLElement;
                    $name: HTMLElement;
                    $widget: HTMLElement;
                    $disable: HTMLElement;
                    _listenCallback(): void;
                    name(name: string): any;
                    _name: string | undefined;
                    onChange(callback: Function): any;
                    _onChange: Function | undefined;
                    _callOnChange(): void;
                    _changed: boolean | undefined;
                    onFinishChange(callback: Function): any;
                    _onFinishChange: Function | undefined;
                    _callOnFinishChange(): void;
                    reset(): any;
                    enable(enabled?: boolean): any;
                    disable(disabled?: boolean): any;
                    show(show?: boolean): any;
                    hide(): any;
                    options(options: object | any[]): any;
                    min(min: number): any;
                    max(max: number): any;
                    step(step: number): any;
                    decimals(decimals: number): any;
                    listen(listen?: boolean): any;
                    _listening: boolean | undefined;
                    _listenCallbackID: number | undefined;
                    _listenPrevValue: any;
                    getValue(): any;
                    setValue(value: any): any;
                    updateDisplay(): any;
                    load(value: any): any;
                    save(): any;
                    destroy(): void;
                };
            }) => any): this;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: {
                    parent: any;
                    object: object;
                    property: string;
                    _disabled: boolean;
                    _hidden: boolean;
                    initialValue: any;
                    domElement: HTMLElement;
                    $name: HTMLElement;
                    $widget: HTMLElement;
                    $disable: HTMLElement;
                    _listenCallback(): void;
                    name(name: string): any;
                    _name: string | undefined;
                    onChange(callback: Function): any;
                    _onChange: Function | undefined;
                    _callOnChange(): void;
                    _changed: boolean | undefined;
                    onFinishChange(callback: Function): any;
                    _onFinishChange: Function | undefined;
                    _callOnFinishChange(): void;
                    reset(): any;
                    enable(enabled?: boolean): any;
                    disable(disabled?: boolean): any;
                    show(show?: boolean): any;
                    hide(): any;
                    options(options: object | any[]): any;
                    min(min: number): any;
                    max(max: number): any;
                    step(step: number): any;
                    decimals(decimals: number): any;
                    listen(listen?: boolean): any;
                    _listening: boolean | undefined;
                    _listenCallbackID: number | undefined;
                    _listenPrevValue: any;
                    getValue(): any;
                    setValue(value: any): any;
                    updateDisplay(): any;
                    load(value: any): any;
                    save(): any;
                    destroy(): void;
                };
            }) => any): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): this;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            }[];
            foldersRecursive(): any[];
        } | undefined;
    } | undefined);
    parent: {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): this;
        save(recursive?: boolean): object;
        open(open?: boolean): this;
        close(): this;
        _setClosed(closed: any): void;
        show(show?: boolean): this;
        hide(): this;
        openAnimated(open?: boolean): any;
        title(title: string): this;
        _title: string | undefined;
        reset(recursive?: boolean): this;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: (arg0: any) => any): this;
        _onOpenClose: ((arg0: any) => any) | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    };
    root: {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): this;
        save(recursive?: boolean): object;
        open(open?: boolean): this;
        close(): this;
        _setClosed(closed: any): void;
        show(show?: boolean): this;
        hide(): this;
        openAnimated(open?: boolean): any;
        title(title: string): this;
        _title: string | undefined;
        reset(recursive?: boolean): this;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: (arg0: any) => any): this;
        _onOpenClose: ((arg0: any) => any) | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    };
    children: ({
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): this;
            save(recursive?: boolean): object;
            open(open?: boolean): this;
            close(): this;
            _setClosed(closed: any): void;
            show(show?: boolean): this;
            hide(): this;
            openAnimated(open?: boolean): any;
            title(title: string): this;
            _title: string | undefined;
            reset(recursive?: boolean): this;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): this;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    } | {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): this;
        save(recursive?: boolean): object;
        open(open?: boolean): this;
        close(): this;
        _setClosed(closed: any): void;
        show(show?: boolean): this;
        hide(): this;
        openAnimated(open?: boolean): any;
        title(title: string): this;
        _title: string | undefined;
        reset(recursive?: boolean): this;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: (arg0: any) => any): this;
        _onOpenClose: ((arg0: any) => any) | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    })[];
    controllers: {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): this;
            save(recursive?: boolean): object;
            open(open?: boolean): this;
            close(): this;
            _setClosed(closed: any): void;
            show(show?: boolean): this;
            hide(): this;
            openAnimated(open?: boolean): any;
            title(title: string): this;
            _title: string | undefined;
            reset(recursive?: boolean): this;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): this;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    }[];
    folders: {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): this;
        save(recursive?: boolean): object;
        open(open?: boolean): this;
        close(): this;
        _setClosed(closed: any): void;
        show(show?: boolean): this;
        hide(): this;
        openAnimated(open?: boolean): any;
        title(title: string): this;
        _title: string | undefined;
        reset(recursive?: boolean): this;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: (arg0: any) => any): this;
        _onOpenClose: ((arg0: any) => any) | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    }[];
    _closed: boolean;
    _hidden: boolean;
    domElement: HTMLElement;
    $title: HTMLElement;
    $children: HTMLElement;
    _closeFolders: boolean | undefined;
    add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): this;
            save(recursive?: boolean): object;
            open(open?: boolean): this;
            close(): this;
            _setClosed(closed: any): void;
            show(show?: boolean): this;
            hide(): this;
            openAnimated(open?: boolean): any;
            title(title: string): this;
            _title: string | undefined;
            reset(recursive?: boolean): this;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): this;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
    addColor(object: object, property: string, rgbScale?: number): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): this;
            save(recursive?: boolean): object;
            open(open?: boolean): this;
            close(): this;
            _setClosed(closed: any): void;
            show(show?: boolean): this;
            hide(): this;
            openAnimated(open?: boolean): any;
            title(title: string): this;
            _title: string | undefined;
            reset(recursive?: boolean): this;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): this;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
    addFolder(title: string): {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): this;
        save(recursive?: boolean): object;
        open(open?: boolean): this;
        close(): this;
        _setClosed(closed: any): void;
        show(show?: boolean): this;
        hide(): this;
        openAnimated(open?: boolean): any;
        title(title: string): this;
        _title: string | undefined;
        reset(recursive?: boolean): this;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: (arg0: any) => any): this;
        _onOpenClose: ((arg0: any) => any) | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    };
    load(obj: object, recursive?: boolean): this;
    save(recursive?: boolean): object;
    open(open?: boolean): this;
    close(): this;
    _setClosed(closed: any): void;
    show(show?: boolean): this;
    hide(): this;
    openAnimated(open?: boolean): this;
    title(title: string): this;
    _title: string | undefined;
    reset(recursive?: boolean): this;
    onChange(callback: (arg0: {
        object: object;
        property: string;
        value: any;
        controller: {
            parent: {
                parent: any;
                root: any;
                children: (any | any)[];
                controllers: any[];
                folders: any[];
                _closed: boolean;
                _hidden: boolean;
                domElement: HTMLElement;
                $title: HTMLElement;
                $children: HTMLElement;
                _closeFolders: boolean | undefined;
                add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
                addColor(object: object, property: string, rgbScale?: number): any;
                addFolder(title: string): any;
                load(obj: object, recursive?: boolean): this;
                save(recursive?: boolean): object;
                open(open?: boolean): this;
                close(): this;
                _setClosed(closed: any): void;
                show(show?: boolean): this;
                hide(): this;
                openAnimated(open?: boolean): any;
                title(title: string): this;
                _title: string | undefined;
                reset(recursive?: boolean): this;
                onChange(callback: any): this;
                _onChange: Function | undefined;
                _callOnChange(controller: any): void;
                onFinishChange(callback: (arg0: {
                    object: object;
                    property: string;
                    value: any;
                    controller: any;
                }) => any): this;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(controller: any): void;
                onOpenClose(callback: (arg0: any) => any): this;
                _onOpenClose: ((arg0: any) => any) | undefined;
                _callOnOpenClose(changedGUI: any): void;
                destroy(): void;
                controllersRecursive(): any[];
                foldersRecursive(): any[];
            };
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
    }) => any): this;
    _onChange: Function | undefined;
    _callOnChange(controller: any): void;
    onFinishChange(callback: (arg0: {
        object: object;
        property: string;
        value: any;
        controller: {
            parent: {
                parent: any;
                root: any;
                children: (any | any)[];
                controllers: any[];
                folders: any[];
                _closed: boolean;
                _hidden: boolean;
                domElement: HTMLElement;
                $title: HTMLElement;
                $children: HTMLElement;
                _closeFolders: boolean | undefined;
                add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
                addColor(object: object, property: string, rgbScale?: number): any;
                addFolder(title: string): any;
                load(obj: object, recursive?: boolean): this;
                save(recursive?: boolean): object;
                open(open?: boolean): this;
                close(): this;
                _setClosed(closed: any): void;
                show(show?: boolean): this;
                hide(): this;
                openAnimated(open?: boolean): any;
                title(title: string): this;
                _title: string | undefined;
                reset(recursive?: boolean): this;
                onChange(callback: (arg0: {
                    object: object;
                    property: string;
                    value: any;
                    controller: any;
                }) => any): this;
                _onChange: Function | undefined;
                _callOnChange(controller: any): void;
                onFinishChange(callback: any): this;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(controller: any): void;
                onOpenClose(callback: (arg0: any) => any): this;
                _onOpenClose: ((arg0: any) => any) | undefined;
                _callOnOpenClose(changedGUI: any): void;
                destroy(): void;
                controllersRecursive(): any[];
                foldersRecursive(): any[];
            };
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
    }) => any): this;
    _onFinishChange: Function | undefined;
    _callOnFinishChange(controller: any): void;
    onOpenClose(callback: (arg0: {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): this;
        save(recursive?: boolean): object;
        open(open?: boolean): this;
        close(): this;
        _setClosed(closed: any): void;
        show(show?: boolean): this;
        hide(): this;
        openAnimated(open?: boolean): any;
        title(title: string): this;
        _title: string | undefined;
        reset(recursive?: boolean): this;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: any): this;
        _onOpenClose: any | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    }) => any): this;
    _onOpenClose: ((arg0: {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): this;
        save(recursive?: boolean): object;
        open(open?: boolean): this;
        close(): this;
        _setClosed(closed: any): void;
        show(show?: boolean): this;
        hide(): this;
        openAnimated(open?: boolean): any;
        title(title: string): this;
        _title: string | undefined;
        reset(recursive?: boolean): this;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: any): this;
        _onOpenClose: any | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    }) => any) | undefined;
    _callOnOpenClose(changedGUI: any): void;
    destroy(): void;
    controllersRecursive(): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): this;
            save(recursive?: boolean): object;
            open(open?: boolean): this;
            close(): this;
            _setClosed(closed: any): void;
            show(show?: boolean): this;
            hide(): this;
            openAnimated(open?: boolean): any;
            title(title: string): this;
            _title: string | undefined;
            reset(recursive?: boolean): this;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): this;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): this;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    }[];
    foldersRecursive(): {
        parent: any;
        root: any;
        children: ({
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        } | any)[];
        controllers: {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        folders: any[];
        _closed: boolean;
        _hidden: boolean;
        domElement: HTMLElement;
        $title: HTMLElement;
        $children: HTMLElement;
        _closeFolders: boolean | undefined;
        add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addColor(object: object, property: string, rgbScale?: number): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        };
        addFolder(title: string): any;
        load(obj: object, recursive?: boolean): this;
        save(recursive?: boolean): object;
        open(open?: boolean): this;
        close(): this;
        _setClosed(closed: any): void;
        show(show?: boolean): this;
        hide(): this;
        openAnimated(open?: boolean): any;
        title(title: string): this;
        _title: string | undefined;
        reset(recursive?: boolean): this;
        onChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onChange: Function | undefined;
        _callOnChange(controller: any): void;
        onFinishChange(callback: (arg0: {
            object: object;
            property: string;
            value: any;
            controller: {
                parent: any;
                object: object;
                property: string;
                _disabled: boolean;
                _hidden: boolean;
                initialValue: any;
                domElement: HTMLElement;
                $name: HTMLElement;
                $widget: HTMLElement;
                $disable: HTMLElement;
                _listenCallback(): void;
                name(name: string): any;
                _name: string | undefined;
                onChange(callback: Function): any;
                _onChange: Function | undefined;
                _callOnChange(): void;
                _changed: boolean | undefined;
                onFinishChange(callback: Function): any;
                _onFinishChange: Function | undefined;
                _callOnFinishChange(): void;
                reset(): any;
                enable(enabled?: boolean): any;
                disable(disabled?: boolean): any;
                show(show?: boolean): any;
                hide(): any;
                options(options: object | any[]): any;
                min(min: number): any;
                max(max: number): any;
                step(step: number): any;
                decimals(decimals: number): any;
                listen(listen?: boolean): any;
                _listening: boolean | undefined;
                _listenCallbackID: number | undefined;
                _listenPrevValue: any;
                getValue(): any;
                setValue(value: any): any;
                updateDisplay(): any;
                load(value: any): any;
                save(): any;
                destroy(): void;
            };
        }) => any): this;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(controller: any): void;
        onOpenClose(callback: (arg0: any) => any): this;
        _onOpenClose: ((arg0: any) => any) | undefined;
        _callOnOpenClose(changedGUI: any): void;
        destroy(): void;
        controllersRecursive(): {
            parent: any;
            object: object;
            property: string;
            _disabled: boolean;
            _hidden: boolean;
            initialValue: any;
            domElement: HTMLElement;
            $name: HTMLElement;
            $widget: HTMLElement;
            $disable: HTMLElement;
            _listenCallback(): void;
            name(name: string): any;
            _name: string | undefined;
            onChange(callback: Function): any;
            _onChange: Function | undefined;
            _callOnChange(): void;
            _changed: boolean | undefined;
            onFinishChange(callback: Function): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(): void;
            reset(): any;
            enable(enabled?: boolean): any;
            disable(disabled?: boolean): any;
            show(show?: boolean): any;
            hide(): any;
            options(options: object | any[]): any;
            min(min: number): any;
            max(max: number): any;
            step(step: number): any;
            decimals(decimals: number): any;
            listen(listen?: boolean): any;
            _listening: boolean | undefined;
            _listenCallbackID: number | undefined;
            _listenPrevValue: any;
            getValue(): any;
            setValue(value: any): any;
            updateDisplay(): any;
            load(value: any): any;
            save(): any;
            destroy(): void;
        }[];
        foldersRecursive(): any[];
    }[];
}
declare const NumberController_base: {
    new (parent: any, object: any, property: any, className: any, elementType?: string): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): any;
            save(recursive?: boolean): object;
            open(open?: boolean): any;
            close(): any;
            _setClosed(closed: any): void;
            show(show?: boolean): any;
            hide(): any;
            openAnimated(open?: boolean): any;
            title(title: string): any;
            _title: string | undefined;
            reset(recursive?: boolean): any;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): any;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
};
export class NumberController extends NumberController_base {
    constructor(parent: any, object: any, property: any, min: any, max: any, step: any);
    decimals(decimals: any): this;
    _decimals: any;
    min(min: any): this;
    _min: any;
    max(max: any): this;
    _max: any;
    step(step: any, explicit?: boolean): this;
    _step: any;
    _stepExplicit: boolean | undefined;
    updateDisplay(): this;
    _initInput(): void;
    $input: HTMLInputElement | undefined;
    _inputFocused: boolean | undefined;
    _initSlider(): void;
    _hasSlider: boolean | undefined;
    $slider: HTMLDivElement | undefined;
    $fill: HTMLDivElement | undefined;
    _setDraggingStyle(active: any, axis?: string): void;
    _getImplicitStep(): number;
    _onUpdateMinMax(): void;
    _normalizeMouseWheel(e: any): any;
    _arrowKeyMultiplier(e: any): number;
    _snap(value: any): any;
    _clamp(value: any): any;
    _snapClampSetValue(value: any): void;
    get _hasScrollBar(): boolean;
    get _hasMin(): boolean;
    get _hasMax(): boolean;
}
declare const OptionController_base: {
    new (parent: any, object: any, property: any, className: any, elementType?: string): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): any;
            save(recursive?: boolean): object;
            open(open?: boolean): any;
            close(): any;
            _setClosed(closed: any): void;
            show(show?: boolean): any;
            hide(): any;
            openAnimated(open?: boolean): any;
            title(title: string): any;
            _title: string | undefined;
            reset(recursive?: boolean): any;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): any;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
};
export class OptionController extends OptionController_base {
    constructor(parent: any, object: any, property: any, options: any);
    $select: HTMLSelectElement;
    $display: HTMLDivElement;
    $disable: HTMLSelectElement;
    options(options: any): this;
    _values: any[] | undefined;
    _names: any[] | undefined;
    updateDisplay(): this;
}
declare const StringController_base: {
    new (parent: any, object: any, property: any, className: any, elementType?: string): {
        parent: {
            parent: any;
            root: any;
            children: (any | any)[];
            controllers: any[];
            folders: any[];
            _closed: boolean;
            _hidden: boolean;
            domElement: HTMLElement;
            $title: HTMLElement;
            $children: HTMLElement;
            _closeFolders: boolean | undefined;
            add(object: object, property: string, $1?: number | object | any[] | undefined, max?: number | undefined, step?: number | undefined): any;
            addColor(object: object, property: string, rgbScale?: number): any;
            addFolder(title: string): any;
            load(obj: object, recursive?: boolean): any;
            save(recursive?: boolean): object;
            open(open?: boolean): any;
            close(): any;
            _setClosed(closed: any): void;
            show(show?: boolean): any;
            hide(): any;
            openAnimated(open?: boolean): any;
            title(title: string): any;
            _title: string | undefined;
            reset(recursive?: boolean): any;
            onChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onChange: Function | undefined;
            _callOnChange(controller: any): void;
            onFinishChange(callback: (arg0: {
                object: object;
                property: string;
                value: any;
                controller: any;
            }) => any): any;
            _onFinishChange: Function | undefined;
            _callOnFinishChange(controller: any): void;
            onOpenClose(callback: (arg0: any) => any): any;
            _onOpenClose: ((arg0: any) => any) | undefined;
            _callOnOpenClose(changedGUI: any): void;
            destroy(): void;
            controllersRecursive(): any[];
            foldersRecursive(): any[];
        };
        object: object;
        property: string;
        _disabled: boolean;
        _hidden: boolean;
        initialValue: any;
        domElement: HTMLElement;
        $name: HTMLElement;
        $widget: HTMLElement;
        $disable: HTMLElement;
        _listenCallback(): void;
        name(name: string): any;
        _name: string | undefined;
        onChange(callback: Function): any;
        _onChange: Function | undefined;
        _callOnChange(): void;
        _changed: boolean | undefined;
        onFinishChange(callback: Function): any;
        _onFinishChange: Function | undefined;
        _callOnFinishChange(): void;
        reset(): any;
        enable(enabled?: boolean): any;
        disable(disabled?: boolean): any;
        show(show?: boolean): any;
        hide(): any;
        options(options: object | any[]): any;
        min(min: number): any;
        max(max: number): any;
        step(step: number): any;
        decimals(decimals: number): any;
        listen(listen?: boolean): any;
        _listening: boolean | undefined;
        _listenCallbackID: number | undefined;
        _listenPrevValue: any;
        getValue(): any;
        setValue(value: any): any;
        updateDisplay(): any;
        load(value: any): any;
        save(): any;
        destroy(): void;
    };
};
export class StringController extends StringController_base {
    constructor(parent: any, object: any, property: any);
    $input: HTMLInputElement;
    $disable: HTMLInputElement;
    updateDisplay(): this;
}
